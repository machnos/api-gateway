/*
 * Licensed to Machnos under one or more contributor license
 * agreements. Machnos licenses this file to you under the
 * Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

ext {
    version_junit = "5.7.1"
    version_pac4j = "4.5.0"

    dep_bouncyCastle = "org.bouncycastle:bcpkix-jdk15on:1.68"
    dep_log4j = "org.apache.logging.log4j:log4j-core:2.14.1"
    dep_pac4jHttp = "org.pac4j:pac4j-http:" + version_pac4j
    dep_pac4jUndertow = "org.pac4j:undertow-pac4j:4.1.1"
    dep_snakeYamlEngine = "org.yaml:snakeyaml:1.28"
    dep_undertowCore = "io.undertow:undertow-core:2.2.8.Final"
}

allprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"
    version "1.0.0-SNAPSHOT"
    group "com.machnos.api.gateway"

    repositories {
        mavenCentral()
    }
    idea {
        module {
            inheritOutputDirs = true
            outputDir = file('out')
        }
    }

    plugins.withType(JavaPlugin).whenPluginAdded {
        compileJava {
            sourceCompatibility = '16'
            targetCompatibility = '16'
            options.encoding = 'UTF-8'
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
            doFirst {
                options.compilerArgs.addAll([
                        '--module-path', classpath.asPath,
                ])
            }
        }
        compileTestJava {
            sourceCompatibility = '11'
            targetCompatibility = '11'
            options.encoding = 'UTF-8'
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
        dependencies {
            testImplementation 'org.junit.jupiter:junit-jupiter-api:' + version_junit
            testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:' + version_junit
            testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:' + version_junit
        }
        test {
            useJUnitPlatform()
        }
        java {
            modularity.inferModulePath = true
        }
        sourceSets.whenObjectAdded {
            if ('integrationTest'.equals(it.name)) {
                dependencies {
                    integrationTestImplementation 'org.junit.jupiter:junit-jupiter-api:' + version_junit
                    integrationTestRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:' + version_junit
                    integrationTestRuntimeOnly 'org.junit.vintage:junit-vintage-engine:' + version_junit
                }

                project.task('integrationTest', type: Test).configure {
                    testClassesDirs = sourceSets.integrationTest.output.classesDirs
                    classpath = sourceSets.integrationTest.runtimeClasspath
                }
                project.integrationTest {
                    useJUnitPlatform()
                }
            }
        }
    }
}